diff --git a/Makefile b/Makefile
index bf95a78..2520821 100644
--- a/Makefile
+++ b/Makefile
@@ -161,7 +161,7 @@ UPROGS=\
 	$U/_zombie\
 	$U/_waittest\
 	$U/_exittest\
-
+	$U/_yieldtest\
 
 ifeq ($(LAB),trap)
 UPROGS += \
diff --git a/kernel/defs.h b/kernel/defs.h
index ecea5e6..3788f30 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -108,7 +108,7 @@ void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
-int             wait(uint64);
+int             wait(uint64,int flags);
 void            wakeup(void*);
 void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
diff --git a/kernel/proc.c b/kernel/proc.c
index 1607145..2420dc3 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -296,6 +296,8 @@ void reparent(struct proc *p) {
 // until its parent calls wait().
 void exit(int status) {
   struct proc *p = myproc();
+  static char *states[] = {
+      [UNUSED] "unused", [SLEEPING] "sleep ", [RUNNABLE] "runble", [RUNNING] "run   ", [ZOMBIE] "zombie"};
 
   if (p == initproc) panic("init exiting");
 
@@ -307,12 +309,12 @@ void exit(int status) {
       p->ofile[fd] = 0;
     }
   }
-
+  
   begin_op();
   iput(p->cwd);
   end_op();
   p->cwd = 0;
-
+  
   // we might re-parent a child to init. we can't be precise about
   // waking up init, since we can't acquire its lock once we've
   // acquired any other proc lock. so wake up init whether that's
@@ -321,7 +323,7 @@ void exit(int status) {
   acquire(&initproc->lock);
   wakeup1(initproc);
   release(&initproc->lock);
-
+  
   // grab a copy of p->parent, to ensure that we unlock the same
   // parent we locked. in case our parent gives us away to init while
   // we're waiting for the parent lock. we may then race with an
@@ -332,23 +334,32 @@ void exit(int status) {
   struct proc *original_parent = p->parent;
   release(&p->lock);
 
+  
   // we need the parent's lock in order to wake it up from wait().
   // the parent-then-child rule says we have to lock it first.
   acquire(&original_parent->lock);
 
   acquire(&p->lock);
-
+  exit_info("proc %d exit, parent pid %d, name %s, state %s\n", p->pid,original_parent->pid, original_parent->name,states[original_parent->state]);
+  struct proc *pp;
+  int i = 0;
+  for (pp = proc; pp < &proc[NPROC]; pp++) {
+    if (pp->parent == p) {
+      exit_info("proc %d exit, child %d, pid %d, name %s, state %s\n", p->pid, i, pp->pid, pp->name, states[pp->state]);
+      i ++;
+    }
+  }
   // Give any children to init.
   reparent(p);
-
+  
   // Parent might be sleeping in wait().
   wakeup1(original_parent);
-
+  
   p->xstate = status;
   p->state = ZOMBIE;
-
+  
   release(&original_parent->lock);
-
+  
   // Jump into the scheduler, never to return.
   sched();
   panic("zombie exit");
@@ -356,7 +367,7 @@ void exit(int status) {
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int wait(uint64 addr) {
+int wait(uint64 addr,int flags) {
   struct proc *np;
   int havekids, pid;
   struct proc *p = myproc();
@@ -399,9 +410,14 @@ int wait(uint64 addr) {
       release(&p->lock);
       return -1;
     }
-
+    //非阻塞状态
+    if(flags){
+      release(&p->lock);
+      return -1;
+    }
     // Wait for a child to exit.
     sleep(p, &p->lock);  // DOC: wait-sleep
+
   }
 }
 
@@ -422,6 +438,7 @@ void scheduler(void) {
     intr_on();
 
     int found = 0;
+
     for (p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
       if (p->state == RUNNABLE) {
@@ -473,6 +490,7 @@ void yield(void) {
   struct proc *p = myproc();
   acquire(&p->lock);
   p->state = RUNNABLE;
+  printf("start to yield, user pc %p\n", p->trapframe->epc);
   sched();
   release(&p->lock);
 }
@@ -619,3 +637,4 @@ void procdump(void) {
     printf("\n");
   }
 }
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index 4c97875..6c3ca16 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -89,6 +89,7 @@ extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
 extern uint64 sys_rename(void);
+extern uint64 sys_yield(void);
 
 static uint64 (*syscalls[])(void) = {
     [SYS_fork] sys_fork,   [SYS_exit] sys_exit,     [SYS_wait] sys_wait,     [SYS_pipe] sys_pipe,
@@ -96,7 +97,7 @@ static uint64 (*syscalls[])(void) = {
     [SYS_chdir] sys_chdir, [SYS_dup] sys_dup,       [SYS_getpid] sys_getpid, [SYS_sbrk] sys_sbrk,
     [SYS_sleep] sys_sleep, [SYS_uptime] sys_uptime, [SYS_open] sys_open,     [SYS_write] sys_write,
     [SYS_mknod] sys_mknod, [SYS_unlink] sys_unlink, [SYS_link] sys_link,     [SYS_mkdir] sys_mkdir,
-    [SYS_close] sys_close, [SYS_rename] sys_rename,
+    [SYS_close] sys_close, [SYS_rename] sys_rename, [SYS_yield] sys_yield,
 };
 
 void syscall(void) {
diff --git a/kernel/syscall.h b/kernel/syscall.h
index 6998f87..52dbf42 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -21,3 +21,4 @@
 #define SYS_mkdir  20
 #define SYS_close  21
 #define SYS_rename 22
+#define SYS_yield  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index a69071e..0afaeda 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -19,9 +19,11 @@ uint64 sys_getpid(void) { return myproc()->pid; }
 uint64 sys_fork(void) { return fork(); }
 
 uint64 sys_wait(void) {
+  int flags;
   uint64 p;
+  if(argint(1, &flags)<0) return -1;
   if (argaddr(0, &p) < 0) return -1;
-  return wait(p);
+  return wait(p,flags);
 }
 
 uint64 sys_sbrk(void) {
@@ -81,3 +83,8 @@ uint64 sys_rename(void) {
   p->name[len] = '\0';
   return 0;
 }
+
+uint64 sys_yield(void) {
+  yield();
+  return 0;
+}
\ No newline at end of file
diff --git a/time.txt b/time.txt
new file mode 100644
index 0000000..7813681
--- /dev/null
+++ b/time.txt
@@ -0,0 +1 @@
+5
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index ec47d9d..e052502 100644
--- a/user/user.h
+++ b/user/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int rename(const char*);
+void yield(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 3a2f6c4..c17d993 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -37,3 +37,4 @@ entry("sbrk");
 entry("sleep");
 entry("uptime");
 entry("rename");
+entry("yield");
\ No newline at end of file
